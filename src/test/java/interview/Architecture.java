package interview;

/**
 * ClassName: ArchitectureDesign <br/>
 * Function: <br/>
 *
 * @author gary.liu
 * @date 2019/9/29
 */
public class Architecture {
/**
 1.高并发的应用场景，技术需要涉及到哪些？怎样来架构设计？
    秒杀，（怎么设计这是一本书的内容喔，只能先提供目录了）
 2.高并发的问题，谈到了秒杀等的技术应用：kafka、redis、mycat等

 3.分布式了解哪些东西？
    分布式网站架构，基础组件（缓存，消息，rpc，）
 4.cap了解么，分别指什么，base呢，强一致性和弱一致性有什么方法来做，2pc了解么，说一下大概过程。
    一个分布式系统最多只能同时满足一致性（Consistency）、可用性（Availability）和分区容错性（Partition tolerance）这三项中的两项。
 Consistency 一致性：即更新操作成功并返回客户端完成后，所有节点在同一时间的数据完全一致。
 Availability 可用性：即服务一直可用，而且是正常响应时间。
 Partition Tolerance分区容错性：即分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。
 项目中使用缓存，可能导致数据的不一致性，保证了pa，稍微影响了用户体验。数据库的主从复制，可能从库的数据不准确，保证了pa。

 5.BASE理论是什么？
    Base是对CAP中一致性和可用性权衡的结果，核心思想是无法做到强一致性，但每个应用都可以根据自身的特点，采用适当方式达到最终一致性。BASE是指基本可用（Basically Available）、软状态（ Soft State）、最终一致性（ Eventual Consistency）。
 基本可用：可响应时间可损失、可功能损失。
 软状态：允许系统数据存在中间状态，但不会影响到系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步时存在延时。
 最终一致性：要求系统数据副本最终能够一致，而不需要实时保证数据副本一致。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。

 5.负载均衡怎么做的呢，为什么这么做。
    硬负载，软负载，dns，slb，nginx
 6.雪崩
    雪崩：根据 Little's law，当延迟变高时，驻留在分布式系统中的请求会剧增，导 致某些节点不可用，不可用的状态甚至会扩散至其它节点，造成整个系统的服务 能力丧失，这种场景又俗称雪崩。

 7.这样一个题目，一个节点要和客户连接建立心跳检测，大概有百万数量的连接，并且会定期发送心跳包，要写一个update方法和check方法，update方法更新心跳状态，check删除超时节点，怎么做?
 刚开始做了个hash发现check要轮询太慢了，然后用计时器和开线程检测也不行，最后说了个LRU，他说OK的。




  */
}
